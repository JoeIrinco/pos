inventoryview
select sum(`vallery`.`transaction_items`.`quantity`) AS `TotalQuantity`,`vallery`.`transaction_items`.`id` AS `id`,`vallery`.`transaction_items`.`transaction_id` AS `transaction_id`,`vallery`.`transaction_items`.`cancelled_id` AS `cancelled_id`,`vallery`.`transaction_items`.`user_id` AS `user_id`,`vallery`.`transaction_items`.`invoice_num` AS `invoice_num`,`vallery`.`transaction_items`.`po_id` AS `po_id`,`vallery`.`transaction_items`.`product_id` AS `product_id`,`vallery`.`transaction_items`.`units` AS `units`,`vallery`.`transaction_items`.`item_id` AS `item_id`,`vallery`.`transaction_items`.`price` AS `price`,`vallery`.`transaction_items`.`transaction_type` AS `transaction_type`,`vallery`.`transaction_items`.`quantity` AS `quantity`,`vallery`.`transaction_items`.`lot_no` AS `lot_no`,`vallery`.`transaction_items`.`location_address` AS `location_address`,`vallery`.`transaction_items`.`shelf` AS `shelf`,`vallery`.`transaction_items`.`rock` AS `rock`,`vallery`.`transaction_items`.`expiration_date` AS `expiration_date`,`vallery`.`transaction_items`.`remarks` AS `remarks`,`vallery`.`transaction_items`.`status` AS `status`,`vallery`.`transaction_items`.`created_at` AS `created_at`,`vallery`.`transaction_items`.`updated_at` AS `updated_at`,`vallery`.`store_product_lists`.`productname` AS `productname`,`vallery`.`store_product_lists`.`product_description` AS `product_description`,`vallery`.`store_product_lists`.`product_code` AS `product_code`,`vallery`.`transaction_items`.`id` AS `TI_id`,`vallery`.`store_product_lists`.`critical_alert` AS `critical_alert`,`vallery`.`transaction_items`.`product_id` AS `product_id_data`,`vallery`.`store_product_lists`.`unit` AS `unit`,`vallery`.`store_product_lists`.`brand` AS `brand` from (`vallery`.`transaction_items` join `vallery`.`store_product_lists` on(`vallery`.`store_product_lists`.`id` = `vallery`.`transaction_items`.`product_id`)) where `vallery`.`transaction_items`.`transaction_type` = 'RECEIVE PO' or `vallery`.`transaction_items`.`transaction_type` = 'RELOCATED' or `vallery`.`transaction_items`.`transaction_type` = 'MANUAL ADD' or `vallery`.`transaction_items`.`transaction_type` = 'REPLACE_INVOICE' or `vallery`.`transaction_items`.`transaction_type` = 'IMPORT' or `vallery`.`transaction_items`.`transaction_type` = 'CANCELLED' or `vallery`.`transaction_items`.`transaction_type` = 'DELETED' group by `vallery`.`transaction_items`.`location_address`,`vallery`.`transaction_items`.`lot_no`,`vallery`.`transaction_items`.`product_id`,`vallery`.`transaction_items`.`expiration_date`,`vallery`.`transaction_items`.`rock`,`vallery`.`transaction_items`.`shelf` order by sum(`vallery`.`transaction_items`.`quantity`) 

locationview
select `vallery`.`locations`.`location` AS `location` from `vallery`.`locations` where `vallery`.`locations`.`location` is not null group by `vallery`.`locations`.`location` union all select `vallery`.`transaction_items`.`location_address` AS `location` from `vallery`.`transaction_items` where `vallery`.`transaction_items`.`location_address` is not null group by `vallery`.`transaction_items`.`location_address`

lotview
select `vallery`.`lots`.`lot_no` AS `lot_no` from `vallery`.`lots` where `vallery`.`lots`.`lot_no` is not null group by `vallery`.`lots`.`lot_no` union all select `vallery`.`transaction_items`.`lot_no` AS `location` from `vallery`.`transaction_items` where `vallery`.`transaction_items`.`lot_no` is not null group by `vallery`.`transaction_items`.`lot_no`


rackfview
select `vallery`.`racks`.`rack` AS `rack` from `vallery`.`racks` where `vallery`.`racks`.`rack` is not null group by `vallery`.`racks`.`rack` union all select `vallery`.`transaction_items`.`rock` AS `rack` from `vallery`.`transaction_items` where `vallery`.`transaction_items`.`rock` is not null group by `vallery`.`transaction_items`.`rock`

shelfview
select `vallery`.`shelf_locations`.`shelf` AS `shelf` from `vallery`.`shelf_locations` where `vallery`.`shelf_locations`.`shelf` is not null group by `vallery`.`shelf_locations`.`shelf` union all select `vallery`.`transaction_items`.`shelf` AS `shelf` from `vallery`.`transaction_items` where `vallery`.`transaction_items`.`shelf` is not null group by `vallery`.`transaction_items`.`shelf`


totalInverntory
select `a`.`id` AS `id`,`a`.`transaction_id` AS `transaction_id`,`a`.`cancelled_id` AS `cancelled_id`,`a`.`user_id` AS `user_id`,`a`.`invoice_num` AS `invoice_num`,`a`.`po_id` AS `po_id`,`a`.`product_id` AS `product_id`,`a`.`units` AS `units`,`a`.`item_id` AS `item_id`,`a`.`price` AS `price`,`a`.`transaction_type` AS `transaction_type`,`a`.`quantity` AS `quantity`,`a`.`lot_no` AS `lot_no`,`a`.`location_address` AS `location_address`,`a`.`shelf` AS `shelf`,`a`.`rock` AS `rock`,`a`.`expiration_date` AS `expiration_date`,`a`.`remarks` AS `remarks`,`a`.`status` AS `status`,`a`.`created_at` AS `created_at`,`a`.`updated_at` AS `updated_at`,`a`.`productname` AS `productname`,`a`.`product_description` AS `product_description`,`a`.`product_code` AS `product_code`,`a`.`TI_id` AS `TI_id`,`a`.`critical_alert` AS `critical_alert`,`a`.`product_id_data` AS `product_id_data`,`a`.`unit` AS `unit`,`a`.`brand` AS `brand`,if(`b`.`TotalQuantity_deduct` is null,`a`.`TotalQuantity`,`a`.`TotalQuantity` - `b`.`TotalQuantity_deduct`) AS `totalQty` from (`vallery`.`inventoryview` `a` left join `vallery`.`deductioninventory` `b` on(`a`.`product_id` = `b`.`product_id` and if(a.lot_no is null, 'noLot',a.lot_no) =if(b.lot_no is null, 'noLot',b.lot_no) and `a`.`expiration_date` = `b`.`expiration_date` and `a`.`shelf` = `b`.`shelf`))


totalInverntory_pos
select `a`.`id` AS `id`,`a`.`transaction_id` AS `transaction_id`,`a`.`cancelled_id` AS `cancelled_id`,`a`.`user_id` AS `user_id`,`a`.`invoice_num` AS `invoice_num`,`a`.`po_id` AS `po_id`,`a`.`product_id` AS `product_id`,`a`.`units` AS `units`,`a`.`item_id` AS `item_id`,`a`.`price` AS `price`,`a`.`transaction_type` AS `transaction_type`,`a`.`quantity` AS `quantity`,`a`.`lot_no` AS `lot_no_data`,`a`.`location_address` AS `location_address`,`a`.`shelf` AS `shelf`,`a`.`rock` AS `rock`,`a`.`expiration_date` AS `expiration_date_data`,`a`.`remarks` AS `remarks`,`a`.`status` AS `status`,`a`.`created_at` AS `created_at`,`a`.`updated_at` AS `updated_at`,`a`.`productname` AS `productname`,`a`.`product_description` AS `product_description`,`a`.`product_code` AS `product_code`,`a`.`TI_id` AS `TI_id`,`a`.`critical_alert` AS `critical_alert`,`a`.`product_id_data` AS `product_id_data`,`a`.`unit` AS `unit`,`a`.`brand` AS `brand`,if(`b`.`TotalQuantity_deduct` is null,`a`.`TotalQuantity`,`a`.`TotalQuantity` - `b`.`TotalQuantity_deduct`) AS `totalQty` ,if(`a`.`expiration_date` = "0000-00-00" or `a`.`expiration_date` = "1970-01-01",concat('noExp'),`a`.`expiration_date`) AS `expiration_date`,if(`a`.`lot_no` is null,concat("noLot"),`a`.`lot_no`) AS `lot_no`  from (`vallery`.`inventoryview` `a` left join `vallery`.`deductioninventory` `b` on(`a`.`product_id` = `b`.`product_id` and if(a.lot_no is null, 'noLot',a.lot_no) =if(b.lot_no is null, 'noLot',b.lot_no) and `a`.`expiration_date` = `b`.`expiration_date` and `a`.`shelf` = `b`.`shelf`))


deductionInventory
select sum(`vallery`.`transaction_items`.`quantity`) AS `TotalQuantity_deduct`,`vallery`.`transaction_items`.`id` AS `id`,`vallery`.`transaction_items`.`transaction_id` AS `transaction_id`,`vallery`.`transaction_items`.`cancelled_id` AS `cancelled_id`,`vallery`.`transaction_items`.`user_id` AS `user_id`,`vallery`.`transaction_items`.`invoice_num` AS `invoice_num`,`vallery`.`transaction_items`.`po_id` AS `po_id`,`vallery`.`transaction_items`.`product_id` AS `product_id`,`vallery`.`transaction_items`.`units` AS `units`,`vallery`.`transaction_items`.`item_id` AS `item_id`,`vallery`.`transaction_items`.`price` AS `price`,`vallery`.`transaction_items`.`transaction_type` AS `transaction_type`,`vallery`.`transaction_items`.`quantity` AS `quantity`,`vallery`.`transaction_items`.`lot_no` AS `lot_no`,`vallery`.`transaction_items`.`location_address` AS `location_address`,`vallery`.`transaction_items`.`shelf` AS `shelf`,`vallery`.`transaction_items`.`rock` AS `rock`,`vallery`.`transaction_items`.`expiration_date` AS `expiration_date`,`vallery`.`transaction_items`.`remarks` AS `remarks`,`vallery`.`transaction_items`.`status` AS `status`,`vallery`.`transaction_items`.`created_at` AS `created_at`,`vallery`.`transaction_items`.`updated_at` AS `updated_at`,`vallery`.`store_product_lists`.`productname` AS `productname`,`vallery`.`store_product_lists`.`product_description` AS `product_description`,`vallery`.`store_product_lists`.`product_code` AS `product_code`,`vallery`.`transaction_items`.`id` AS `TI_id`,`vallery`.`store_product_lists`.`critical_alert` AS `critical_alert`,`vallery`.`transaction_items`.`product_id` AS `product_id_data`,`vallery`.`store_product_lists`.`unit` AS `unit`,`vallery`.`store_product_lists`.`brand` AS `brand` from (`vallery`.`transaction_items` join `vallery`.`store_product_lists` on(`vallery`.`store_product_lists`.`id` = `vallery`.`transaction_items`.`product_id`)) where `vallery`.`transaction_items`.`transaction_type` = 'POS' or `vallery`.`transaction_items`.`transaction_type` = 'DISPOSE' or `vallery`.`transaction_items`.`transaction_type` = 'TRANSFERRED' or `vallery`.`transaction_items`.`transaction_type` = 'MANUAL MINUS' or `vallery`.`transaction_items`.`transaction_type` = 'RETURN_P_PO' group by `vallery`.`transaction_items`.`location_address`,`vallery`.`transaction_items`.`lot_no`,`vallery`.`transaction_items`.`product_id`,`vallery`.`transaction_items`.`expiration_date`,`vallery`.`transaction_items`.`rock`,`vallery`.`transaction_items`.`shelf` order by sum(`vallery`.`transaction_items`.`quantity`)


producthistoryview
select `vallery`.`transaction_items`.`quantity` AS `TotalQuantity`,`vallery`.`transaction_items`.`id` AS `id`,`vallery`.`transaction_items`.`transaction_id` AS `transaction_id`,`vallery`.`transaction_items`.`cancelled_id` AS `cancelled_id`,`vallery`.`transaction_items`.`user_id` AS `user_id`,`vallery`.`transaction_items`.`invoice_num` AS `invoice_num`,`vallery`.`transaction_items`.`po_id` AS `po_id`,`vallery`.`transaction_items`.`product_id` AS `product_id`,`vallery`.`transaction_items`.`units` AS `units`,`vallery`.`transaction_items`.`item_id` AS `item_id`,`vallery`.`transaction_items`.`price` AS `price`,`vallery`.`transaction_items`.`transaction_type` AS `transaction_type`,`vallery`.`transaction_items`.`quantity` AS `quantity`,`vallery`.`transaction_items`.`lot_no` AS `lot_no`,`vallery`.`transaction_items`.`location_address` AS `location_address`,`vallery`.`transaction_items`.`shelf` AS `shelf`,`vallery`.`transaction_items`.`rock` AS `rock`,`vallery`.`transaction_items`.`expiration_date` AS `expiration_date`,`vallery`.`transaction_items`.`remarks` AS `remarks`,`vallery`.`transaction_items`.`status` AS `status`,`vallery`.`transaction_items`.`created_at` AS `created_at`,`vallery`.`transaction_items`.`updated_at` AS `updated_at`,`vallery`.`store_product_lists`.`productname` AS `productname`,`vallery`.`store_product_lists`.`product_description` AS `product_description`,`vallery`.`store_product_lists`.`product_code` AS `product_code`,`vallery`.`transaction_items`.`id` AS `TI_id`,`vallery`.`store_product_lists`.`critical_alert` AS `critical_alert`,`vallery`.`transaction_items`.`product_id` AS `product_id_data`,`vallery`.`store_product_lists`.`unit` AS `unit`,`vallery`.`store_product_lists`.`brand` AS `brand` from (`vallery`.`transaction_items` join `vallery`.`store_product_lists` on(`vallery`.`store_product_lists`.`id` = `vallery`.`transaction_items`.`product_id`))


add in user tabbel 
profile_path
filename


composer require yajra/laravel-datatables-oracle:"~8.0"
php artisan vendor:publish --tag=datatables

 totalinverntory_w_date
select `a`.`transaction_date` AS `transaction_date`,`a`.`id` AS `id`,`a`.`transaction_id` AS `transaction_id`,`a`.`cancelled_id` AS `cancelled_id`,`a`.`user_id` AS `user_id`,`a`.`invoice_num` AS `invoice_num`,`a`.`po_id` AS `po_id`,`a`.`product_id` AS `product_id`,`a`.`units` AS `units`,`a`.`item_id` AS `item_id`,`a`.`price` AS `price`,`a`.`transaction_type` AS `transaction_type`,`a`.`quantity` AS `quantity`,`a`.`lot_no` AS `lot_no`,`a`.`location_address` AS `location_address`,`a`.`shelf` AS `shelf`,`a`.`rock` AS `rock`,`a`.`expiration_date` AS `expiration_date`,`a`.`remarks` AS `remarks`,`a`.`status` AS `status`,`a`.`created_at` AS `created_at`,`a`.`updated_at` AS `updated_at`,`a`.`productname` AS `productname`,`a`.`product_description` AS `product_description`,`a`.`product_code` AS `product_code`,`a`.`TI_id` AS `TI_id`,`a`.`critical_alert` AS `critical_alert`,`a`.`product_id_data` AS `product_id_data`,`a`.`unit` AS `unit`,`a`.`brand` AS `brand`,if(`b`.`TotalQuantity_deduct` is null,`a`.`TotalQuantity`,`a`.`TotalQuantity` - `b`.`TotalQuantity_deduct`) AS `totalQty` from (`vallery`.`inventory_w_date` `a` left join `vallery`.`deductioninventory_w_date` `b` on(`a`.`product_id` = `b`.`product_id` and if(`a`.`lot_no` is null,'noLot',`a`.`lot_no`) = if(`b`.`lot_no` is null,'noLot',`b`.`lot_no`) and `a`.`transaction_date` = `b`.`transaction_date` and `a`.`expiration_date` = `b`.`expiration_date` and `a`.`shelf` = `b`.`shelf` and `a`.`location_address` = `b`.`location_address`)) group by `a`.`created_at`


deductioninventory_w_date
select cast(`vallery`.`transaction_items`.`created_at` as date) AS `transaction_date`,sum(`vallery`.`transaction_items`.`quantity`) AS `TotalQuantity_deduct`,`vallery`.`transaction_items`.`id` AS `id`,`vallery`.`transaction_items`.`transaction_id` AS `transaction_id`,`vallery`.`transaction_items`.`cancelled_id` AS `cancelled_id`,`vallery`.`transaction_items`.`user_id` AS `user_id`,`vallery`.`transaction_items`.`invoice_num` AS `invoice_num`,`vallery`.`transaction_items`.`po_id` AS `po_id`,`vallery`.`transaction_items`.`product_id` AS `product_id`,`vallery`.`transaction_items`.`units` AS `units`,`vallery`.`transaction_items`.`item_id` AS `item_id`,`vallery`.`transaction_items`.`price` AS `price`,`vallery`.`transaction_items`.`transaction_type` AS `transaction_type`,`vallery`.`transaction_items`.`quantity` AS `quantity`,`vallery`.`transaction_items`.`lot_no` AS `lot_no`,`vallery`.`transaction_items`.`location_address` AS `location_address`,`vallery`.`transaction_items`.`shelf` AS `shelf`,`vallery`.`transaction_items`.`rock` AS `rock`,`vallery`.`transaction_items`.`expiration_date` AS `expiration_date`,`vallery`.`transaction_items`.`remarks` AS `remarks`,`vallery`.`transaction_items`.`status` AS `status`,`vallery`.`transaction_items`.`created_at` AS `created_at`,`vallery`.`transaction_items`.`updated_at` AS `updated_at`,`vallery`.`store_product_lists`.`productname` AS `productname`,`vallery`.`store_product_lists`.`product_description` AS `product_description`,`vallery`.`store_product_lists`.`product_code` AS `product_code`,`vallery`.`transaction_items`.`id` AS `TI_id`,`vallery`.`store_product_lists`.`critical_alert` AS `critical_alert`,`vallery`.`transaction_items`.`product_id` AS `product_id_data`,`vallery`.`store_product_lists`.`unit` AS `unit`,`vallery`.`store_product_lists`.`brand` AS `brand` from (`vallery`.`transaction_items` join `vallery`.`store_product_lists` on(`vallery`.`store_product_lists`.`id` = `vallery`.`transaction_items`.`product_id`)) where `vallery`.`transaction_items`.`transaction_type` = 'POS' or `vallery`.`transaction_items`.`transaction_type` = 'DISPOSE' or `vallery`.`transaction_items`.`transaction_type` = 'TRANSFERRED' or `vallery`.`transaction_items`.`transaction_type` = 'MANUAL MINUS' or `vallery`.`transaction_items`.`transaction_type` = 'RETURN_P_PO' group by cast(`vallery`.`transaction_items`.`created_at` as date),`vallery`.`transaction_items`.`location_address`,`vallery`.`transaction_items`.`lot_no`,`vallery`.`transaction_items`.`product_id`,`vallery`.`transaction_items`.`expiration_date`,`vallery`.`transaction_items`.`rock`,`vallery`.`transaction_items`.`shelf` order by sum(`vallery`.`transaction_items`.`quantity`)

CREATE  VIEW `inventory_w_date`  AS SELECT cast(`transaction_items`.`created_at` as date) AS `transaction_date`, sum(`transaction_items`.`quantity`) AS `TotalQuantity`, `transaction_items`.`id` AS `id`, `transaction_items`.`transaction_id` AS `transaction_id`, `transaction_items`.`cancelled_id` AS `cancelled_id`, `transaction_items`.`user_id` AS `user_id`, `transaction_items`.`invoice_num` AS `invoice_num`, `transaction_items`.`po_id` AS `po_id`, `transaction_items`.`product_id` AS `product_id`, `transaction_items`.`units` AS `units`, `transaction_items`.`item_id` AS `item_id`, `transaction_items`.`price` AS `price`, `transaction_items`.`transaction_type` AS `transaction_type`, `transaction_items`.`quantity` AS `quantity`, `transaction_items`.`lot_no` AS `lot_no`, `transaction_items`.`location_address` AS `location_address`, `transaction_items`.`shelf` AS `shelf`, `transaction_items`.`rock` AS `rock`, `transaction_items`.`expiration_date` AS `expiration_date`, `transaction_items`.`remarks` AS `remarks`, `transaction_items`.`status` AS `status`, `transaction_items`.`created_at` AS `created_at`, `transaction_items`.`updated_at` AS `updated_at`, `store_product_lists`.`productname` AS `productname`, `store_product_lists`.`product_description` AS `product_description`, `store_product_lists`.`product_code` AS `product_code`, `transaction_items`.`id` AS `TI_id`, `store_product_lists`.`critical_alert` AS `critical_alert`, `transaction_items`.`product_id` AS `product_id_data`, `store_product_lists`.`unit` AS `unit`, `store_product_lists`.`brand` AS `brand` FROM (`transaction_items` join `store_product_lists` on(`store_product_lists`.`id` = `transaction_items`.`product_id`)) WHERE `transaction_items`.`transaction_type` = 'RECEIVE PO' OR `transaction_items`.`transaction_type` = 'RELOCATED' OR `transaction_items`.`transaction_type` = 'MANUAL ADD' OR `transaction_items`.`transaction_type` = 'REPLACE_INVOICE' OR `transaction_items`.`transaction_type` = 'IMPORT' OR `transaction_items`.`transaction_type` = 'DELETED' OR `transaction_items`.`transaction_type` = 'CANCELLED' GROUP BY cast(`transaction_items`.`created_at` as date), `transaction_items`.`location_address`, `transaction_items`.`lot_no`, `transaction_items`.`product_id`, `transaction_items`.`expiration_date`, `transaction_items`.`rock`, `transaction_items`.`shelf` ORDER BY sum(`transaction_items`.`quantity`) ASC ;
